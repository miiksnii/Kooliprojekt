@page "/create"
@page "/edit/{Id:int}"

@using KooliProjekt.PublicApi.Api
@using Microsoft.AspNetCore.Components.Forms
@inject IApiClient apiClient
@inject NavigationManager NavManager

<h3>@title töölogi</h3>

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
        <div class="alert alert-danger">@errorMessage</div>
}

<EditForm EditContext="editContext" OnValidSubmit="FormSubmitted">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Kuupäev</label>
        <InputDate @bind-Value="workLog.Date" class="form-control" />
        <ValidationMessage For="@(() => workLog.Date)" />
    </div>
    <div class="mb-3">
        <label class="form-label">Minutid</label>
        <InputNumber @bind-Value="workLog.TimeSpentInMinutes" class="form-control" />
        <ValidationMessage For="@(() => workLog.TimeSpentInMinutes)" />
    </div>
    <div class="mb-3">
        <label class="form-label">Töötaja nimi</label>
        <InputText @bind-Value="workLog.WorkerName" class="form-control" />
        <ValidationMessage For="@(() => workLog.WorkerName)" />
    </div>
    <div class="mb-3">
        <label class="form-label">Kirjeldus</label>
        <InputTextArea @bind-Value="workLog.Description" class="form-control" />
        <ValidationMessage For="@(() => workLog.Description)" />
    </div>

    <button type="submit" class="btn btn-primary">Salvesta</button>
</EditForm>

@code {
    [Parameter] public int Id { get; set; }

    private ApiWorkLog workLog = new ApiWorkLog();
    private EditContext editContext;
    private ValidationMessageStore messageStore;
    private string title = "Lisa";
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            title = "Muuda";
            var getResult = await apiClient.Get(Id);
            if (getResult.HasError)
            {
                errorMessage = string.Join("; ", getResult.Errors.SelectMany(e => e.Value));
                // keep a fresh blank model so form still renders
                workLog = new ApiWorkLog();
            }
            else
            {
                workLog = getResult.Value!;
            }
        }

        editContext = new EditContext(workLog);
        messageStore = new ValidationMessageStore(editContext);
        editContext.OnValidationRequested += (_, __) => messageStore.Clear();
        editContext.OnFieldChanged += (_, args) => messageStore.Clear(args.FieldIdentifier);
    }

    private async Task FormSubmitted()
    {
        // attempt save; ApiClient.Save returns a Result, not throw
        var saveResult = await apiClient.Save(workLog);

        if (saveResult.HasError)
        {
            AddValidationErrors(saveResult);
            return;
        }

        // on success, navigate as before
        NavManager.NavigateTo("/worklogs");
    }

    private void AddValidationErrors(Result result)
    {
        foreach (var kvp in result.Errors)
        {
            var fieldId = new FieldIdentifier(workLog, kvp.Key);
            foreach (var msg in kvp.Value)
            {
                messageStore.Add(fieldId, msg);
            }
        }
        editContext.NotifyValidationStateChanged();
    }
}
__